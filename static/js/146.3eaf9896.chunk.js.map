{"version":3,"file":"static/js/146.3eaf9896.chunk.js","mappings":"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","sources":["components/BookMark.js","firebase/useBookmark.js","components/button/MemoTopButton.js","views/memo/MemoDetail.js","views/memo/Memo.js","../node_modules/@mui/icons-material/Favorite.js","../node_modules/@mui/icons-material/FavoriteBorder.js"],"sourcesContent":["import { Box, Divider, Paper, Typography, styled } from '@mui/material';\r\nimport Link from '@mui/material/Link';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useBookmark } from '../firebase/useBookmark';\r\nimport { useFireUser } from '../firebase/useFireUser';\r\nimport { TitleItem } from './item/TitleItem';\r\n\r\nexport function BookMark(props) {\r\n  const {user} = useFireUser();\r\n  const navigate = useNavigate();\r\n  const bookmark = useBookmark(user?.uid);\r\n\r\n  // console.log('BookMark.bookmark=', bookmark);\r\n\r\n  if(user === undefined) return <></>\r\n  \r\n  return (\r\n    <Box sx={{\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      flexDirection: 'column',\r\n      width:'100%'\r\n    }}>\r\n      <Divider />\r\n      <TitleItem>BookMark</TitleItem>\r\n      {bookmark && bookmark.map((item, index) => {\r\n        //console.log('BookMark=' + index, item);\r\n        return (\r\n          <div key={index}>\r\n            <Link\r\n              component=\"button\"\r\n              variant=\"body\"\r\n              onClick={() => {\r\n                //console.info(\"I'm a button.\");\r\n                props.onSelected(item.key);\r\n                navigate(`/memo/${item.key}`);\r\n              }}\r\n            >\r\n              <Typography variant=\"body1\">{item.title}</Typography>\r\n            </Link>\r\n            {/* <Link to={`/memo/${item.key}`}> {item.title} </Link> */}\r\n          </div>\r\n        );\r\n      })}\r\n    </Box>\r\n  );\r\n}\r\n","import { equalTo, onValue, orderByChild, query, ref } from \"firebase/database\";\r\nimport { firebaseDB } from \"./firebase\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n//북마크 관련\r\nexport const useBookmark = (uid) => {\r\n    const [bookmark, setBookmark] = useState([]);\r\n  \r\n    useEffect(() => {\r\n      getBookmarkData();\r\n    }, [uid]);\r\n  \r\n    const getBookmarkData = () => {\r\n      const memoRef = query(\r\n        ref(firebaseDB, `memo_txt/${uid}`),\r\n        orderByChild('bookmark'),\r\n        equalTo('Y')\r\n        // orderByKey('bookmark')\r\n      );\r\n  \r\n      onValue(memoRef, (snapshot) => {\r\n        // console.log('useBookmark.snapshot', snapshot);\r\n        if (!snapshot.exists()) return;\r\n  \r\n        const data = snapshot.val();\r\n        // console.log('useBookmark.data=', data);\r\n  \r\n        const temp = [];\r\n        for (let i in data) {\r\n          const item = data[i];\r\n          item.key = i;\r\n          //console.log('BookMark=' + i, item);\r\n          temp.push(item);\r\n        }\r\n        // 문자 정렬 처리\r\n        temp.sort((a, b) => (a.title > b.title ? 1 : -1));\r\n  \r\n        setBookmark(temp);\r\n      });\r\n    };\r\n  \r\n    return bookmark;\r\n  };","import { Box, Button, Grid, IconButton } from '@mui/material';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\nimport AniButton from './AniButton';\r\n/* \r\n메모상세 상단 버튼 표시\r\n\r\n사용예)\r\n<MemoTopButton\r\n  onEdit={onEditMode}\r\n  onNewMemo={onNewMemo}\r\n  onMove={onMove}\r\n  onDelete={onDelete}\r\n  onBookmark={onBookmark}\r\n  bookmark={bookmark}\r\n/>\r\nhttps://goo-gy.github.io/2021-02-10-css-position\r\nhttps://github.com/goo-gy\r\nhttps://github.com/goo-gy/goo-gy.github.io\r\n */\r\nexport const MemoTopButton = (props) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flexGrow: 1,\r\n        my: 2,\r\n        // maxWidth: 360,\r\n        width: '100%',\r\n        display: 'grid',\r\n        gridTemplateColumns: '64px 64px  64px  64px ', // 1fr \r\n        // gridTemplateRows: '200px 200px 200px',\r\n        flexDirection: 'row',\r\n        alignItems: 'center',  // align-items는 div 한줄일때 수직정렬을 의미.\r\n        alignContent: 'center',  // align-content는 div 두줄 이상 일때 사용\r\n        justifyContent: 'center', // 위에서 가운데 정렬.\r\n        textAlign: 'center',\r\n        whiteSpace: 'nowrap',\r\n      }}\r\n    >\r\n      <AniButton\r\n        type=\"button\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        color=\"success\"\r\n        onClick={props.onEdit}\r\n      >\r\n        수정\r\n      </AniButton>\r\n      <AniButton\r\n        type=\"button\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        // color=\"success\"\r\n        onClick={props.onNewMemo}\r\n      >\r\n        새글\r\n      </AniButton>\r\n      <AniButton\r\n        type=\"button\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        color=\"warning\"\r\n        onClick={props.onMove}\r\n      >\r\n        이동\r\n      </AniButton>\r\n      <AniButton\r\n        type=\"button\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n        color=\"error\"\r\n        onClick={props.onDelete}\r\n      >\r\n        삭제\r\n      </AniButton>\r\n{/* \r\n      <IconButton aria-label=\"bookmark\" onClick={props.onBookmark}>\r\n        {props.bookmark === 'Y' ? (\r\n          <FavoriteIcon sx={{ color: 'red' }} />\r\n        ) : (\r\n          <FavoriteBorderIcon />\r\n        )}\r\n      </IconButton>\r\n */}      \r\n    </Box>\r\n  );\r\n};\r\n\r\nexport const MemoTopButtonBAK = (props) => {\r\n  return (\r\n    <Box\r\n      sx={{\r\n        flexGrow: 1,\r\n        my: 2,\r\n        maxWidth: 360,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        alignContent: 'center',\r\n        justifyContent: 'center',\r\n        textAlign: 'center',\r\n      }}\r\n    >\r\n      <Grid\r\n        container\r\n        spacing={0.5}\r\n        columns={{ xs: 4, sx: 5, sm: 5, md: 10 }}\r\n        xs={{ maxWidth: 360, ml: 1, mr: 1 }}\r\n        justifyContent=\"center\"\r\n        // alignItems=\"center\"\r\n        alignContent={'center'}\r\n        textAlign=\"center\"\r\n        // border={1}\r\n      >\r\n        <Grid item xs={1} sx={1} sm={1} md={2}>\r\n          <AniButton\r\n            type=\"button\"\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            color=\"success\"\r\n            onClick={props.onEdit}\r\n          >\r\n            수정\r\n          </AniButton>\r\n        </Grid>\r\n        <Grid item xs={1} sx={1} sm={1} md={2}>\r\n          <AniButton\r\n            type=\"button\"\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            // color=\"success\"\r\n            onClick={props.onNewMemo}\r\n          >\r\n            새글\r\n          </AniButton>\r\n        </Grid>\r\n        <Grid item xs={1} sx={1} sm={1} md={2}>\r\n          <AniButton\r\n            type=\"button\"\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            color=\"warning\"\r\n            onClick={props.onMove}\r\n          >\r\n            이동\r\n          </AniButton>\r\n        </Grid>\r\n        <Grid item xs={1} sx={1} sm={1} md={2}>\r\n          <AniButton\r\n            type=\"button\"\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            color=\"error\"\r\n            onClick={props.onDelete}\r\n          >\r\n            삭제\r\n          </AniButton>\r\n        </Grid>\r\n        <Grid item xs={1} sx={1} sm={1} md={2}>\r\n          <IconButton aria-label=\"bookmark\" onClick={props.onBookmark}>\r\n            {props.bookmark === 'Y' ? (\r\n              <FavoriteIcon sx={{ color: 'red' }} />\r\n            ) : (\r\n              <FavoriteBorderIcon />\r\n            )}\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n    </Box>\r\n  );\r\n};\r\n","import { child, push, ref, set } from '@firebase/database';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport Box from '@mui/material/Box';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Fab from '@mui/material/Fab';\r\nimport { deleteObject, ref as storegeRef, uploadBytes } from 'firebase/storage';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { useLocation, useNavigate, useParams } from 'react-router-dom';\r\nimport { firebaseDB, firebaseStorage } from '../../firebase/firebase';\r\nimport getExtensionOfFilename from '../../util/getExtensionOfFilename';\r\nimport Container from '@mui/material/Container';\r\nimport HtmlEditor from '../../components/edit/HtmlEditor';\r\nimport { HtmlText } from '../../components/item/HtmlText';\r\nimport { MemoMoveModal } from '../../components/MemoMoveModal';\r\nimport { MemoTopButton } from '../../components/button/MemoTopButton';\r\nimport { ScrollToTop } from '../../components/screen/ScrollToTop';\r\nimport { TitleItem } from '../../components/item/TitleItem';\r\nimport { getMemo, setMemo, setNewMemoKey } from '../../firebase/fireDatabase';\r\nimport {\r\n  getMemoTxt,\r\n  setMemoBookmark,\r\n  setMemoFullIndex,\r\n} from '../../firebase/fireDatabase';\r\nimport { useFireText } from '../../firebase/useFireText';\r\nimport { useFireUser } from '../../firebase/useFireUser';\r\nimport { useSettings } from '../../hooks/useSettings';\r\nimport '../MemoDetail.css';\r\nimport { SinyImageList } from '../../components/SinyImageList';\r\nimport { IconButton } from '@mui/material';\r\nimport FavoriteIcon from '@mui/icons-material/Favorite';\r\nimport FavoriteBorderIcon from '@mui/icons-material/FavoriteBorder';\r\n\r\n// 메모장 상세 화면\r\nexport const MemoDetail = (props) => {\r\n  const {\r\n    title: detailTitle,\r\n    gbn,\r\n    date,\r\n    home,\r\n    text: detailText,\r\n    image,\r\n    setFireId,\r\n    bookmark,\r\n    setBookmark,\r\n    isLoading,\r\n    onReload,\r\n  } = useFireText();\r\n\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [moveOpen, setMoveOpen] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n  const newMode = useRef();\r\n  const searchWord = useRef();\r\n  searchWord.current = props.searchWord;\r\n  // console.log('MemoDetail.searchWord=', searchWord.current);\r\n\r\n  const { memoId } = useParams();\r\n  //console.log('MemoDetail=', props);\r\n\r\n  const location = useLocation();\r\n  const fullIndex = location?.state?.fullIndex;\r\n  // console.log('MemoDetail.fullIndex=', fullIndex);\r\n\r\n  const { user } = useFireUser();\r\n\r\n  // ** Hooks\r\n  const { settings, saveSettings } = useSettings();\r\n\r\n  const onEditMode = () => {\r\n    newMode.current = false;\r\n    if (isLoading === false) setEditMode(true);\r\n  };\r\n\r\n  const onNewMemo = () => {\r\n    newMode.current = true;\r\n    if (isLoading === false) setEditMode(true);\r\n  };\r\n\r\n  const handleDelete = async () => {\r\n    console.log('handleDelete.memoId=', memoId);\r\n\r\n    const data = await getMemoTxt(user.uid, memoId);\r\n    if (data === undefined) {\r\n      alert('삭제에 실패했습니다.');\r\n      return;\r\n    }\r\n\r\n    console.log('handleDelete.data=', data);\r\n\r\n    const treeLocate = `memo/${user.uid}/${data.fullIndex}/`;\r\n\r\n    set(ref(firebaseDB, treeLocate), null);\r\n    set(ref(firebaseDB, `memo_txt/${user.uid}/${memoId}`), null);\r\n\r\n    // fullIndex: \"-NmZXQW8Z1Z_EK-0gkUg/sub/-NmZXUXvc3nNTOZ5Dw_h\"\r\n    // memo: \"<p>test2test23</p><p>test2</p><p>test2</p><p>test2</p>\"\r\n    // title: \"test23\"\r\n\r\n    navigate('/memo');\r\n  };\r\n\r\n  const onDelete = () => {\r\n    const message = `하위 자료가 있는 경우 같이 삭제됩니다.\r\n삭제하시겠습니까?`;\r\n    if (window.confirm(message)) {\r\n      handleDelete();\r\n    }\r\n    //newMode.current = true;\r\n    //if (isLoading === false) setEditMode(true);\r\n  };\r\n\r\n  const onMove = () => {\r\n    setMoveOpen(true);\r\n  };\r\n\r\n  //취소 버튼 클릭\r\n  const onNotEditMode = () => {\r\n    //console.log('onNotEdit');\r\n    setEditMode(false);\r\n  };\r\n\r\n  const onBookmark = () => {\r\n    //console.log('onEdit');\r\n    const val = bookmark === 'Y' ? 'N' : 'Y';\r\n\r\n    //메모장 북마크 저장 (Y/N)\r\n    setBookmark(val);\r\n    setMemoBookmark(user.uid, memoId, val);\r\n  };\r\n\r\n  //이동 처리\r\n  const onMoveSubmit = async (moveId) => {\r\n    console.log('onMoveSubmit.memoId', memoId);\r\n    console.log('onMoveSubmit.moveId', moveId);\r\n\r\n    try {\r\n      //이동할 메모장 정보를 읽는다\r\n      const toData = await getMemoTxt(user.uid, moveId);\r\n      if (toData === undefined) {\r\n        alert('이동에 실패했습니다.[code:110]');\r\n        return;\r\n      }\r\n      if (toData.fullIndex === undefined) {\r\n        alert('이동에 실패했습니다.[code:120]');\r\n        return;\r\n      }\r\n      console.log('onMoveSubmit.toData=', toData);\r\n\r\n      //이동할 메모장 정보를 읽는다\r\n      const fromData = await getMemoTxt(user.uid, memoId);\r\n      if (fromData === undefined) {\r\n        alert('이동에 실패했습니다.[code:210]');\r\n        return;\r\n      }\r\n      if (fromData.fullIndex === undefined) {\r\n        alert('이동에 실패했습니다.[code2120]');\r\n        return;\r\n      }\r\n      console.log('onMoveSubmit.fromData=', fromData);\r\n\r\n      // 트리 정보 읽기\r\n      const treeData = await getMemo(user.uid, fromData.fullIndex);\r\n      console.log('onMoveSubmit.treeData=', treeData);\r\n      treeData.fullIndex = `${toData.fullIndex}/sub/${memoId}`;\r\n\r\n      // 저장\r\n      setMemo(user.uid, `${toData.fullIndex}/sub/${memoId}`, treeData);\r\n\r\n      // 삭제\r\n      setMemo(user.uid, fromData.fullIndex, null);\r\n    } catch (e) {\r\n      console.log('catch', e);\r\n    } finally {\r\n      setMoveOpen(false);\r\n    }\r\n  };\r\n\r\n  //새글 저장 처리\r\n  const onNewSubmit = async (values, imageList, files) => {\r\n    // console.log('onNewSubmit.values', values);\r\n    //트리뷰 타이틀 수정\r\n    // console.log('onNewSubmit.fullIndex', fullIndex);\r\n\r\n    const locate = `memo_txt/${user.uid}/`;\r\n\r\n    // 이미지 저장\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i].object;\r\n      const ext = getExtensionOfFilename(file.name);\r\n      console.log('onNewSubmit.file.name', file.name, 'ext=', ext);\r\n\r\n      // 이미지 형식\r\n      const postData = {\r\n        ext: ext,\r\n        name: file.name,\r\n        use: 'Y',\r\n      };\r\n\r\n      // Get a key for a new Post.\r\n      const newKey = push(child(ref(firebaseDB), locate + 'image')).key;\r\n      console.log('onNewSubmit.image.newKey', newKey);\r\n\r\n      set(ref(firebaseDB, locate + `image/${newKey}`), postData);\r\n\r\n      const storageRef = await storegeRef(\r\n        firebaseStorage,\r\n        `memo/${user.uid}/${memoId}/${newKey}.${ext}`\r\n      );\r\n      // storageRef.put(file);\r\n      const result = await uploadBytes(storageRef, file);\r\n      console.log('onNewSubmit.uploadBytes', result);\r\n    }\r\n    // end of 이미지 저장\r\n\r\n    // 메모 내용 새키 추가\r\n    const newKey = setNewMemoKey(locate);\r\n    console.log('onNewSubmit.newKey', newKey);\r\n\r\n    // 메모 내용 저장\r\n    set(ref(firebaseDB, locate + newKey + '/title'), values.edTitle);\r\n    set(ref(firebaseDB, locate + newKey + '/memo'), values.content);\r\n    set(ref(firebaseDB, locate + newKey + '/date'), values.edDate);\r\n    set(ref(firebaseDB, locate + newKey + '/gbn'), values.edGbn);\r\n\r\n    // 트리 제목 저장\r\n    if (fullIndex !== undefined) {\r\n      set(\r\n        ref(firebaseDB, `memo/${user.uid}/${fullIndex}/sub/${newKey}/title`),\r\n        values.edTitle\r\n      );\r\n    }\r\n\r\n    navigate(`/memo/${newKey}`);\r\n    newMode.current = false;\r\n    setEditMode(false);\r\n    onReload();\r\n  }; // end of onNewSubmit\r\n\r\n  //저장 처리\r\n  const onPostSubmit = async (values, imageList, files) => {\r\n    // console.log('onPostSubmit.values', values);\r\n    // console.log('onPostSubmit.imageList', imageList);\r\n    // console.log('onPostSubmit.add.files', files);\r\n\r\n    const locate = `memo_txt/${user.uid}/${memoId}/`;\r\n\r\n    // 서버 이미지 삭제\r\n    if (imageList !== undefined) {\r\n      for (let i = 0; i < imageList.length; i++) {\r\n        const file = imageList[i];\r\n        if (file.del === 'Y') {\r\n          console.log('onPostSubmit.imageList.file', file);\r\n          set(ref(firebaseDB, locate + `image/${file.key}`), null);\r\n\r\n          const storageRef = await storegeRef(\r\n            firebaseStorage,\r\n            `memo/${user.uid}/${memoId}/${file.key}.${file.ext}`\r\n          );\r\n\r\n          // Delete the file\r\n          deleteObject(storageRef)\r\n            .then(() => {\r\n              console.log('deleteObject');\r\n              // File deleted successfully\r\n            })\r\n            .catch((error) => {\r\n              console.log('deleteObject.error=', error);\r\n              // Uh-oh, an error occurred!\r\n            });\r\n        }\r\n        // setImageList(imageList);\r\n      }\r\n    }\r\n\r\n    // 이미지 저장\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i].object;\r\n      const ext = getExtensionOfFilename(file.name);\r\n      console.log('onPostSubmit.file.name', file.name);\r\n      console.log('onPostSubmit.ext', ext);\r\n\r\n      // 이미지 형식\r\n      const postData = {\r\n        ext: ext,\r\n        name: file.name,\r\n        use: 'Y',\r\n      };\r\n\r\n      // Get a key for a new Post.\r\n      const newKey = push(child(ref(firebaseDB), locate + 'image')).key;\r\n      console.log('onPostSubmit.newKey', newKey);\r\n\r\n      set(ref(firebaseDB, locate + `image/${newKey}`), postData);\r\n\r\n      const storageRef = await storegeRef(\r\n        firebaseStorage,\r\n        `memo/${user.uid}/${memoId}/${newKey}.${ext}`\r\n      );\r\n      // storageRef.put(file);\r\n      const result = await uploadBytes(storageRef, file);\r\n      console.log('onPostSubmit.uploadBytes', result);\r\n    }\r\n    // end of 이미지 저장\r\n\r\n    await set(ref(firebaseDB, locate + 'title'), values.edTitle);\r\n    await set(ref(firebaseDB, locate + 'memo'), values.content);\r\n    await set(ref(firebaseDB, locate + 'date'), values.edDate);\r\n    await set(ref(firebaseDB, locate + 'gbn'), values.edGbn);\r\n\r\n    //트리뷰 타이틀 수정\r\n    console.log('onPostSubmit.fullIndex', fullIndex);\r\n    if (fullIndex === undefined) {\r\n      const fullPath = await getMemoTxt(user.uid, `${memoId}/fullIndex`);\r\n      if (fullPath !== undefined) {\r\n        set(\r\n          ref(firebaseDB, `memo/${user.uid}/${fullPath}/title`),\r\n          values.edTitle\r\n        );\r\n      }\r\n    } else {\r\n      set(ref(firebaseDB, `memo/${user.uid}/${fullIndex}/title`), values.edTitle);\r\n    }\r\n\r\n    /* \r\n    https://sinyproject.firebaseio.com\r\n    memo/I3cTgdCxwjhBBno4mtZYvnODPJu1/-MghXvrWe1bMU9G73QDf/sub/-MghY6R88j4HO4jyYWu5/title\r\n    memo/I3cTgdCxwjhBBno4mtZYvnODPJu1/-MghXvrWe1bMU9G73QDf/-MghY6R88j4HO4jyYWu5/title\r\n*/\r\n    //const title = ref(firebaseDB, `memo_txt/${userId}/${memoId}/memo`);\r\n    //console.log('onPostSubmit.title', props.content);\r\n    newMode.current = false;\r\n    setEditMode(false);\r\n    onReload();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user !== undefined) {\r\n      saveSettings({ ...settings, nodeId: memoId });\r\n      setEditMode(false);\r\n      //전체경로 저장\r\n      setMemoFullIndex(user.uid, memoId, fullIndex);\r\n      // console.log('MemoDetail.fullIndex=', fullIndex);\r\n      // 아이디 변경, 프로그램 시작점\r\n      setFireId(\r\n        `memo_txt/${user.uid}/${memoId}`, //메모 상세 경로\r\n        `memo/${user.uid}/${memoId}`, // 이미지 경로\r\n        searchWord.current\r\n      );\r\n    }\r\n\r\n    // console.log(`useEffect.memoId=` + memoId);\r\n    setEditMode(false);\r\n    // return setImageList('');\r\n  }, [memoId, user]);\r\n\r\n  if (memoId === '' || user === undefined) {\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div id=\"back-to-top-anchor\"></div>\r\n      <TitleItem\r\n        style={{\r\n          display: 'flex',\r\n          flexDirection: 'row',\r\n          alignItems: 'center',\r\n          alignContent: 'center',\r\n          justifyContent: 'space-between',\r\n          // justifyContent: 'flex-end',\r\n        }}\r\n      >\r\n        <div></div>\r\n        <div>{detailTitle.current}</div>\r\n        <IconButton aria-label=\"bookmark\" onClick={onBookmark}>\r\n          {bookmark === 'Y' ? (\r\n            <FavoriteIcon sx={{ color: 'red' }} />\r\n          ) : (\r\n            <FavoriteBorderIcon />\r\n          )}\r\n        </IconButton>\r\n      </TitleItem>\r\n      <Container className=\"container\" sx={{ p: 0, width: '100%' }}>\r\n        {!editMode && (\r\n          <MemoTopButton\r\n            onEdit={onEditMode}\r\n            onNewMemo={onNewMemo}\r\n            onMove={onMove}\r\n            onDelete={onDelete}\r\n            onBookmark={onBookmark}\r\n            bookmark={bookmark}\r\n          />\r\n        )}\r\n        {editMode && (\r\n          <HtmlEditor\r\n            newMode={newMode.current}\r\n            onPostSubmit={onPostSubmit}\r\n            onNewSubmit={onNewSubmit}\r\n            onCancel={onNotEditMode}\r\n            title={detailTitle.current}\r\n            gbn={gbn.current}\r\n            date={date.current}\r\n            content={detailText}\r\n            imageList={image}\r\n          />\r\n          // <MemoEditor\r\n          //     show={editMode}\r\n          //     newMode={newMode.current}\r\n          //     onPostSubmit={onPostSubmit}\r\n          //     onNewSubmit={onNewSubmit}\r\n          //     onCancel={onNotEditMode}\r\n          //     title={memoTitle}\r\n          //     content={memoText}\r\n          //     imageList={imageList}\r\n          //   />\r\n        )}\r\n\r\n        {/* overflow: 'hidden', overflowY: 'auto', maxHeight: 500 */}\r\n        <Box sx={{ my: 2 }}>\r\n          <HtmlText show={!editMode} text={detailText} />\r\n          {!editMode && <SinyImageList imageList={image} show={!editMode} />}\r\n          {isLoading && (\r\n            <Box\r\n              sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n              }}\r\n            >\r\n              <CircularProgress sx={{ mt: 5 }} />\r\n            </Box>\r\n          )}\r\n        </Box>\r\n        <MemoMoveModal\r\n          userId={user.uid}\r\n          open={moveOpen}\r\n          data={props.data}\r\n          onClose={() => setMoveOpen(false)}\r\n          onPost={onMoveSubmit}\r\n        />\r\n      </Container>\r\n      <ScrollToTop {...props} id={'#back-to-top-anchor'}>\r\n        <Fab color=\"primary\" size=\"small\" aria-label=\"scroll back to top\">\r\n          <KeyboardArrowUpIcon />\r\n        </Fab>\r\n      </ScrollToTop>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","import Box from '@mui/material/Box';\r\nimport { child, push, ref, set } from 'firebase/database';\r\nimport { ref as storegeRef, uploadBytes } from 'firebase/storage';\r\nimport * as React from 'react';\r\nimport { useEffect, useRef, useState } from 'react';\r\nimport { Route, Routes, useNavigate } from 'react-router-dom';\r\nimport { BookMark } from '../../components/BookMark';\r\nimport { LoginDisplay } from '../../components/auth/LoginDisplay';\r\nimport { MemoTreeView } from '../../components/MemoTreeView';\r\nimport SinyTree from '../../components/tree/SinyTree';\r\nimport { setFireData, setNewMemoKey } from '../../firebase/fireDatabase';\r\nimport { firebaseDB, firebaseStorage } from '../../firebase/firebase';\r\nimport { CommonLayout } from '../../layout/CommonLayout';\r\nimport getExtensionOfFilename from '../../util/getExtensionOfFilename';\r\nimport useWindowDimensions from '../../util/useWindowDimensions';\r\nimport { MemoDetail } from './MemoDetail';\r\n// import MemoMain from './MemoMain';\r\nimport { Suspense } from 'react';\r\nimport { Loading } from '../../components/Loading';\r\nimport HtmlEditor from '../../components/edit/HtmlEditor';\r\nimport { useFireUser } from '../../firebase/useFireUser';\r\nimport { useTreeData } from '../../firebase/useTreeData';\r\n\r\nconst drawerWidth = 220;\r\n\r\nconst Memo = (props) => {\r\n  const navigate = useNavigate();\r\n\r\n  const { user } = useFireUser();\r\n  const [newMode, setNewMode] = useState(false); // 새글 모드 여부\r\n  const searchWord = useRef();\r\n\r\n  const [memoData, setMemoData, setWord] = useTreeData('');\r\n  const [memoId, setMemoId] = useState('');\r\n  const fullIndex = useRef();\r\n\r\n  //const { data: treeData, isPending } = useTreeData();\r\n  //const [treeData, setTreeData]  = useState();\r\n\r\n  useEffect(() => {\r\n    if (user !== undefined) setMemoData(`memo/${user.uid}`);\r\n  }, [user]);\r\n\r\n  // useEffect(() => {\r\n  //   getTreeData(uid);\r\n  // }, [uid]);\r\n\r\n  // 트리뷰 선택\r\n  const onDetail = (id, fIdx) => {\r\n    // console.log('memoId=', id, fIdx);\r\n    fullIndex.current = fIdx;\r\n    setMemoId(id);\r\n    navigate(`/memo/${id}`, { state: { fullIndex: fIdx } });\r\n    // <Link to=\"new-path\" state={{ some: \"value\" }} />\r\n    // navigate(\"/\", { state: { cardId: cardId } });\r\n\r\n    // const location = useLocation();\r\n    // const { cardId } = location.state;\r\n  };\r\n\r\n  //새글버튼 클릭\r\n  const onNewMemoBtn = () => {\r\n    console.log('onNewMemoBtn.fullIndex', fullIndex);\r\n    if (user === undefined) {\r\n      alert('로그인 후 이용 가능합니다.');\r\n      return;\r\n    }\r\n    setNewMode(true);\r\n  };\r\n\r\n  //조회버튼 클릭\r\n  const onSearchDataBtn = (word) => {\r\n    console.log('onSearchDataBtn=', word);\r\n    if (word !== '') {\r\n      setMemoData(`memo_txt/${user.uid}`);\r\n      setWord(word);\r\n    } else {\r\n      setWord(undefined);\r\n      setMemoData(`memo/${user.uid}`);\r\n    }\r\n    searchWord.current = word;\r\n  };\r\n\r\n  //취소 버튼 클릭\r\n  const onCancel = () => {\r\n    //console.log('onNotEdit');\r\n    setNewMode(false);\r\n  };\r\n\r\n  //최상위 새글 저장 처리\r\n  const onNewSubmit = async (values, imageList, files) => {\r\n    // console.log('onNewSubmit.values', values);\r\n\r\n    const locate = `memo_txt/${user.uid}/`;\r\n\r\n    // 이미지 저장\r\n    for (let i = 0; i < files.length; i++) {\r\n      const file = files[i].object;\r\n      const ext = getExtensionOfFilename(file.name);\r\n      console.log('onNewSubmit.file.name', file.name, 'ext=', ext);\r\n\r\n      // 이미지 형식\r\n      const postData = {\r\n        ext: ext,\r\n        name: file.name,\r\n        use: 'Y',\r\n      };\r\n\r\n      // Get a key for a new Post.\r\n      const newKey = push(child(ref(firebaseDB), locate + 'image')).key;\r\n      console.log('onNewSubmit.image.newKey', newKey);\r\n\r\n      set(ref(firebaseDB, locate + `image/${newKey}`), postData);\r\n\r\n      const storageRef = await storegeRef(\r\n        firebaseStorage,\r\n        `memo/${user.uid}/${memoId}/${newKey}.${ext}`\r\n      );\r\n      // storageRef.put(file);\r\n      const result = await uploadBytes(storageRef, file);\r\n      console.log('onNewSubmit.uploadBytes', result);\r\n    }\r\n    // end of 이미지 저장\r\n\r\n    // 새 메모장 키 생성\r\n    const newKey = setNewMemoKey(locate);\r\n    // console.log('onNewSubmit.newKey', newKey);\r\n\r\n    //새메모 저장 내용 설정\r\n    const newMemoText = {\r\n      title: values.edTitle,\r\n      date: values.edDate,\r\n      gbn: values.edGbn,\r\n      memo: values.content,\r\n      fullIndex: newKey,\r\n      up: newKey,\r\n      bookmark: 'N',\r\n    };\r\n\r\n    // 메모 내용 저장\r\n    setFireData(`${locate}${newKey}`, newMemoText);\r\n\r\n    // 트리 저장 형식\r\n    // property:\"f\" / \"m\"\r\n    const treeData = {\r\n      gbn: '',\r\n      property: 'm',\r\n      title: values.edTitle,\r\n      up: newKey,\r\n    };\r\n    // 트리 제목 저장\r\n    setFireData(`memo/${user.uid}/${newKey}`, treeData);\r\n\r\n    // 모드변경\r\n    setNewMode(false);\r\n  }; // end of onNewSubmit\r\n\r\n  const onSelected = (id) => {\r\n    console.log('onSelected=', id);\r\n    setMemoId(id);\r\n  };\r\n\r\n  const { height, width } = useWindowDimensions();\r\n\r\n  const sideContents = (\r\n    <Box\r\n      sx={{\r\n        minHeight: 110,\r\n        flexGrow: 1,\r\n        minWidth: 100,\r\n        maxHeight: height,\r\n      }}\r\n    >\r\n      <LoginDisplay />\r\n      <MemoTreeView\r\n        onNewMemoBtn={onNewMemoBtn}\r\n        onSearchDataBtn={onSearchDataBtn}\r\n      />\r\n      <Box\r\n        sx={{\r\n          flexGrow: 1,\r\n          minWidth: 100,\r\n          minHeight: 110,\r\n          maxHeight: height - 220,\r\n          height: height - 220,\r\n        }}\r\n      >\r\n        <Suspense fallback={<Loading />}>\r\n          <SinyTree\r\n            data={memoData}\r\n            onDetail={onDetail}\r\n            maxHeight={height - 150}\r\n          />\r\n        </Suspense>\r\n      </Box>\r\n    </Box>\r\n  );\r\n\r\n  const MemoMain = React.lazy(async () => await import('./MemoMain'));\r\n\r\n  // mui xs sm md lg xl\r\n  return (\r\n    <React.Suspense fallback={<Loading />}>\r\n      <CommonLayout\r\n        title={'메모장'}\r\n        drawerWidth={drawerWidth}\r\n        width={width}\r\n        sideContents={sideContents}\r\n      >\r\n        {!newMode && (\r\n          <Suspense fallback={<Loading />}>\r\n            <Routes>\r\n              <Route\r\n                path=\"/:memoId\"\r\n                element={\r\n                  <MemoDetail searchWord={searchWord.current} data={memoData} />\r\n                }\r\n              ></Route>\r\n              <Route\r\n                path=\"*\"\r\n                element={\r\n                  <MemoMain\r\n                    searchWord={searchWord.current}\r\n                    data={memoData}\r\n                    onNewMemoBtn={onNewMemoBtn}\r\n                    title=\"메모장 홈\"\r\n                  />\r\n                }\r\n              ></Route>\r\n            </Routes>\r\n          </Suspense>\r\n        )}\r\n        {newMode && (\r\n          <HtmlEditor\r\n            show={newMode}\r\n            newMode={newMode.current}\r\n            onPostSubmit={onNewSubmit}\r\n            onNewSubmit={onNewSubmit}\r\n            onCancel={onCancel}\r\n            title={''}\r\n            content={''}\r\n            imageList={[]}\r\n          />\r\n        )}\r\n        <BookMark onSelected={onSelected} />\r\n      </CommonLayout>\r\n    </React.Suspense>\r\n  );\r\n};\r\n\r\nexport default Memo;\r\n","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"m12 21.35-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z\"\n}), 'Favorite');\nexports.default = _default;","\"use strict\";\n\"use client\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nvar _default = (0, _createSvgIcon.default)( /*#__PURE__*/(0, _jsxRuntime.jsx)(\"path\", {\n  d: \"M16.5 3c-1.74 0-3.41.81-4.5 2.09C10.91 3.81 9.24 3 7.5 3 4.42 3 2 5.42 2 8.5c0 3.78 3.4 6.86 8.55 11.54L12 21.35l1.45-1.32C18.6 15.36 22 12.28 22 8.5 22 5.42 19.58 3 16.5 3zm-4.4 15.55-.1.1-.1-.1C7.14 14.24 4 11.39 4 8.5 4 6.5 5.5 5 7.5 5c1.54 0 3.04.99 3.57 2.36h1.87C13.46 5.99 14.96 5 16.5 5c2 0 3.5 1.5 3.5 3.5 0 2.89-3.14 5.74-7.9 10.05z\"\n}), 'FavoriteBorder');\nexports.default = _default;"],"names":["BookMark","props","user","useFireUser","navigate","useNavigate","bookmark","uid","setBookmark","useState","useEffect","getBookmarkData","memoRef","query","ref","firebaseDB","concat","orderByChild","equalTo","onValue","snapshot","exists","data","val","temp","i","item","key","push","sort","a","b","title","useBookmark","undefined","_jsx","_Fragment","_jsxs","Box","sx","display","alignItems","flexDirection","width","children","Divider","TitleItem","map","index","Link","component","variant","onClick","onSelected","Typography","MemoTopButton","flexGrow","my","gridTemplateColumns","alignContent","justifyContent","textAlign","whiteSpace","AniButton","type","size","color","onEdit","onNewMemo","onMove","onDelete","MemoDetail","_location$state","detailTitle","gbn","date","home","text","detailText","image","setFireId","isLoading","onReload","useFireText","editMode","setEditMode","moveOpen","setMoveOpen","newMode","useRef","searchWord","current","memoId","useParams","location","useLocation","fullIndex","state","settings","saveSettings","useSettings","onBookmark","setMemoBookmark","nodeId","setMemoFullIndex","React","id","style","IconButton","FavoriteIcon","FavoriteBorderIcon","Container","className","p","onEditMode","window","confirm","async","console","log","getMemoTxt","alert","treeLocate","set","handleDelete","HtmlEditor","onPostSubmit","values","imageList","files","locate","length","file","del","storageRef","storegeRef","firebaseStorage","ext","deleteObject","then","catch","error","object","getExtensionOfFilename","name","postData","use","newKey","child","result","uploadBytes","edTitle","content","edDate","edGbn","fullPath","onNewSubmit","setNewMemoKey","onCancel","onNotEditMode","HtmlText","show","SinyImageList","CircularProgress","mt","MemoMoveModal","userId","open","onClose","onPost","moveId","toData","fromData","treeData","getMemo","setMemo","e","ScrollToTop","Fab","KeyboardArrowUpIcon","setNewMode","memoData","setMemoData","setWord","useTreeData","setMemoId","onNewMemoBtn","newMemoText","memo","up","setFireData","property","height","useWindowDimensions","sideContents","minHeight","minWidth","maxHeight","LoginDisplay","MemoTreeView","onSearchDataBtn","word","Suspense","fallback","Loading","SinyTree","onDetail","fIdx","MemoMain","CommonLayout","drawerWidth","Routes","Route","path","element","_interopRequireDefault","require","exports","_createSvgIcon","_jsxRuntime","_default","default","jsx","d"],"sourceRoot":""}