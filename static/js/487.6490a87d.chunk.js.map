{"version":3,"file":"static/js/487.6490a87d.chunk.js","mappings":"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","sources":["components/BibleBookmarkText.js","firebase/useBibleBookmark.js","views/bible/SongDetail.js"],"sourcesContent":["import { Divider, Grid } from '@mui/material';\r\nimport { HtmlText } from './item/HtmlText';\r\nimport { LinkItem } from './item/LinkItem';\r\nimport { useBibleBookmark } from '../firebase/useBibleBookmark';\r\n\r\nconst BibleBookmarkText = () => {\r\n  // const data = new Array();\r\n  const { query } = useBibleBookmark();\r\n  const data = query.data;\r\n\r\n  // console.log('BibleText.dataText=', props.dataText);\r\n  // console.log('BibleBookmarkText.data=', data);\r\n\r\n  if (data === undefined || data === null) return;\r\n\r\n  return (\r\n    <>\r\n      {data.map((item, idx) => {\r\n        // console.log('BibleText.item=', item);\r\n        return (\r\n          <Grid\r\n            container\r\n            spacing={2}\r\n            columns={{ xs: 5, sm: 7, md: 10, lg: 12 }}\r\n            key={idx}\r\n            id={`id_${idx + 1}`}\r\n          >\r\n            <Grid item xs={1} md={1}>\r\n              <LinkItem\r\n                to={`/bible/${item.cd1}_${item.cd2}_${item.cd3}`}\r\n                state={{ cd4: item.cd4 }}\r\n              >\r\n                {item.nm}\r\n              </LinkItem>\r\n            </Grid>\r\n            <Grid item xs={4} sm={6} md={9} lg={11}>\r\n              <HtmlText show={true} text={item.txt} />\r\n            </Grid>\r\n          </Grid>\r\n        );\r\n      })}\r\n      <Divider />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BibleBookmarkText;\r\n","import { get, onValue, ref, set } from 'firebase/database';\r\nimport { useEffect, useState } from 'react';\r\nimport { firebaseDB } from './firebase';\r\nimport { useFireUser } from './useFireUser';\r\nimport { Query, QueryClient, useQuery, useSuspenseQuery } from '@tanstack/react-query';\r\n\r\n// 북마크 관련\r\n// use :\r\n// const bookmark = useBibleBookmark();\r\nexport const useBibleBookmark = () => {\r\n  const queryClient = new QueryClient();\r\n  const { user } = useFireUser();\r\n\r\n  // const queryClient = new QueryClient();\r\n  // const id = queryClient.getQueryData('userId');\r\n  // console.log('useBibleBookmark.id=', id);\r\n  // let userId; // 'I3cTgdCxwjhBBno4mtZYvnODPJu1';\r\n\r\n  const query = useQuery({ // useQuery //useSuspenseQuery\r\n    queryKey: ['useBibleBookmark'],\r\n    // queryFn: () => new Promise(() => {getBookmarkData()}),\r\n    queryFn: ()=> getBookmarkData(),\r\n    // The query will not execute until the userId exists\r\n    enabled: false,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if(user !== undefined) {\r\n      // console.log('useEffect.user=', user);\r\n      query.refetch();\r\n    }\r\n  }, [user]);\r\n\r\n  async function getBookmarkData() {\r\n    // console.log('getBookmarkData.user', user.uid);\r\n    if (user.uid === undefined) {\r\n      return new Error('Error undefined');\r\n    }\r\n    const locate = ref(firebaseDB, `bible_mark/${user.uid}`);\r\n\r\n    const snapshot = await get(locate);\r\n    const result = new Array();\r\n    // console.log('useBookmark.snapshot', snapshot);\r\n\r\n    if (!snapshot.exists()) {\r\n      // console.log('getBookmarkData.exists', snapshot);\r\n      return new Error('Error exists');\r\n    } else {\r\n      const data = snapshot.val();\r\n      // console.log('useBookmark.data=', data);\r\n      Object.values(data).map((item) => {\r\n        item.bookmark === 'Y' && result.push(item);\r\n      });\r\n      // console.log('getBookmarkData.result=', result);\r\n      return result;\r\n    }\r\n  }\r\n\r\n  // song_mark\r\n  // bible_mark\r\n  const setBibleBookmark = (item) => {\r\n    if (user === undefined) return;\r\n\r\n    /* \r\n    {nm: '잠31:2', text: '내 아들아 내가 무엇을 말하랴 내 태에서 난 아들아 내가 무엇을 말하랴 서원대로 얻은 아들아 내가 무엇을 말하랴', \r\n    key: '1_20', cd1: '1', cd2: '20', …}\r\n    */\r\n\r\n    if (user === undefined) return;\r\n\r\n    let value = 'N';\r\n    if (item.bookmark === undefined || item.bookmark === 'N') {\r\n      value = 'Y';\r\n    }\r\n    item.bookmark = value;\r\n\r\n    // console.log('setBibleBookmark.item=', item);\r\n\r\n    const locate = `bible_mark/${user.uid}/${item.cd1}_${item.cd2}_${item.cd3}_${item.cd4}`;\r\n    set(ref(firebaseDB, locate), item);\r\n\r\n    queryClient.invalidateQueries({ queryKey: ['useBibleBookmark'] })\r\n    query.refetch();\r\n\r\n    /*     const val = bookmark === 'Y' ? 'N' : 'Y';\r\n    setBookmark(val);\r\n\r\n    */\r\n  }\r\n\r\n  // console.log('useBibleBookmark.query.data=', query.data);\r\n  return {query, setBibleBookmark};\r\n  //return query\r\n}; // end of useBibleBookmark\r\n","import { get, ref, set } from '@firebase/database';\r\nimport BookmarkAddedIcon from '@mui/icons-material/BookmarkAdded';\r\nimport BookmarkBorderIcon from '@mui/icons-material/BookmarkBorder';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Fab from '@mui/material/Fab';\r\nimport ImageListItem from '@mui/material/ImageListItem';\r\nimport Typography from '@mui/material/Typography';\r\nimport React, { Suspense, useState } from 'react';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport AnimateButton from '../../components/button/AnimateButton';\r\nimport { firebaseDB } from '../../firebase/firebase';\r\n\r\nimport { useQuery, useSuspenseQuery } from '@tanstack/react-query';\r\nimport BibleBookmarkText from '../../components/BibleBookmarkText';\r\nimport { HtmlText } from '../../components/item/HtmlText';\r\nimport { Loading } from '../../components/Loading';\r\nimport { ScrollToTop } from '../../components/screen/ScrollToTop';\r\nimport { TitleItem } from '../../components/item/TitleItem';\r\nimport { useFireUser } from '../../firebase/useFireUser';\r\nimport '../MemoDetail.css';\r\n\r\nconst BtnDisplay = (props) => {\r\n  return (\r\n    <Box sx={{ my: 2, display: 'flex' }}>\r\n      <AnimateButton>\r\n        <Button\r\n          type=\"button\"\r\n          variant=\"outlined\"\r\n          // color=\"success\"\r\n          onClick={props.onBookmark}\r\n        >\r\n          {props.bookmark === 'Y' ? (\r\n            <BookmarkAddedIcon sx={{ color: 'red' }} />\r\n          ) : (\r\n            <BookmarkBorderIcon />\r\n          )}\r\n          &nbsp;북마크\r\n        </Button>\r\n      </AnimateButton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nfunction wrapPromise(promise) {\r\n  let status = 'pending';\r\n  let response;\r\n\r\n  const suspender = promise.then(\r\n    (res) => {\r\n      console.log('wrapPromise.res=', res);\r\n      status = 'success';\r\n      response = res;\r\n    },\r\n    (err) => {\r\n      console.log('wrapPromise.err=', err);\r\n      status = 'error';\r\n      response = err;\r\n    }\r\n  );\r\n\r\n  const read = () => {\r\n    switch (status) {\r\n      case 'pending':\r\n        throw suspender;\r\n      case 'error':\r\n        throw response;\r\n      default:\r\n        return response;\r\n    }\r\n  };\r\n\r\n  return { read };\r\n}\r\n\r\nconst SongText = ({ text }) => {\r\n  if (text === null) return <></>;\r\n\r\n  return (\r\n    <Typography\r\n      variant=\"h8\"\r\n      sx={{\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n      }}\r\n    >\r\n      <HtmlText text={text.txt} />\r\n    </Typography>\r\n  );\r\n};\r\n\r\n\r\nconst getSongText = async (songId) => {\r\n  // https://console.firebase.google.com/project/sinyproject/database/sinyproject/data/bible_song_txt/2\r\n  // /data/bible_song_txt/2\r\n\r\n  // 한번만 읽기\r\n\r\n  console.log('getSongText.songId=', songId);\r\n\r\n  let result = null;\r\n  const snapshot = await get(ref(firebaseDB, `bible_song_txt/${songId}`));\r\n\r\n  if (snapshot.exists()) {\r\n    const data = snapshot.val();\r\n    result = data;\r\n    // setTimeout(() => {\r\n    //   console.log('getSongText.data=', data);\r\n    //   setIsLoading(false);\r\n    //   result = data;\r\n    // }, 5000);\r\n  } else {\r\n    console.log('No data available');\r\n  }\r\n\r\n  console.log('getSongText.result=', result);\r\n\r\n  return result;\r\n}; // end of getSongText\r\n\r\nexport const SongDetail = (props) => {\r\n  const [bookmark, setBookmark] = useState('N');\r\n  const { user } = useFireUser();\r\n  const { songId } = useParams();\r\n  console.log('SongDetail.songId=', songId);\r\n\r\n  const {\r\n    data: songData,\r\n    isPending,\r\n    isFetching,\r\n  } = useQuery({\r\n    queryKey: ['songText'],\r\n    queryFn: () => getSongText(songId),\r\n  });\r\n  console.log('SongDetail.songData=', songData);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // console.log('SongDetail.isPending=', isPending, 'isFetching=', isFetching);\r\n  // console.log('SongDetail.songData=', songData);\r\n\r\n  /* \r\n  useEffect(() => {\r\n    const tmp = getSongText(songId);\r\n    console.log(`useEffect.tmp=`, tmp);\r\n    setSongData(tmp);\r\n  }, [songId]);\r\n */\r\n  //console.log('MemoDetail.memoId=', memoId);\r\n\r\n  const onBookmark = () => {\r\n    //console.log('onEdit');\r\n    const val = bookmark === 'Y' ? 'N' : 'Y';\r\n    setBookmark(val);\r\n\r\n    const locate = `memo_txt/${user.uid}/${songId}/bookmark`;\r\n    set(ref(firebaseDB, locate), val);\r\n  };\r\n\r\n  if (songId === '') {\r\n    return <></>;\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <BibleBookmarkText />\r\n      <TitleItem>{songData !== undefined && songData.nm !== null ? songData.nm : ''}</TitleItem>\r\n      <div style={{ padding: 0, marginTop: 5, marginBottom: 10 }}>\r\n        <ImageListItem>\r\n          <img\r\n            // srcSet={`${item}?w=164&h=164&fit=crop&auto=format&dpr=2 2x`}\r\n            src={`https://sinymemo.web.app/img/bible_song/${songId}.gif`}\r\n            loading=\"lazy\"\r\n          />\r\n        </ImageListItem>\r\n      </div>\r\n      {/* <Suspense fallback={<Loading />}> */}\r\n        {!isFetching && <SongText text={songData} />}        \r\n        {/* {songData && songData.txt !== null ? ( */}\r\n      {/* </Suspense> */}\r\n      {/* {isLoading && <Loading />} */}\r\n      <div style={{ padding: 0, marginTop: 20 }}>\r\n        <AnimateButton>\r\n          <Button\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            onClick={() => navigate(`/bible/song`)}\r\n          >\r\n            찬송가 홈\r\n          </Button>\r\n        </AnimateButton>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default SongDetail;\r\n"],"names":["BibleBookmarkText","query","useBibleBookmark","data","undefined","_jsxs","_Fragment","children","map","item","idx","Grid","container","spacing","columns","xs","sm","md","lg","id","concat","_jsx","LinkItem","to","cd1","cd2","cd3","state","cd4","nm","HtmlText","show","text","txt","Divider","queryClient","QueryClient","user","useFireUser","useQuery","queryKey","queryFn","async","uid","Error","locate","ref","firebaseDB","snapshot","get","result","Array","exists","val","Object","values","bookmark","push","getBookmarkData","enabled","useEffect","refetch","setBibleBookmark","value","set","invalidateQueries","SongText","_ref","Typography","variant","sx","display","alignItems","flexDirection","SongDetail","props","setBookmark","useState","songId","useParams","console","log","songData","isPending","isFetching","getSongText","navigate","useNavigate","React","TitleItem","style","padding","marginTop","marginBottom","ImageListItem","src","loading","AnimateButton","Button","fullWidth","onClick"],"sourceRoot":""}