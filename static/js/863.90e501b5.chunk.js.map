{"version":3,"file":"static/js/863.90e501b5.chunk.js","mappings":"4SA6LA,QAxIA,WACE,MAAM,UAAEA,EAAS,OAAEC,IAAWC,EAAAA,EAAAA,MACvBC,EAAQC,IAAaC,EAAAA,EAAAA,WAAS,GAC/BC,GAAcC,EAAAA,EAAAA,UAIdC,ECjDgBC,KAEtB,IAAKA,EAAM,MAAO,GAElB,IAEE,OADcC,IAAAA,IAAaC,QAAQF,EAAMG,EAAAA,IAC5BC,SAASH,IAAAA,IAAaI,KACrC,CAAE,MAAOC,GAEP,OADAC,QAAQD,MAAM,oBAAqBA,GAC5B,EACT,GDuCYJ,CADV,gHAGIM,EAAS,IAAIC,EAAAA,GAAO,CACxBC,OAAQX,EACRY,yBAAyB,IAGrBC,EACU,cAAdrB,EAA4BC,EAAS,IAAM,GAAK,KAAOA,EAAS,IAAM,KAmDxE,OA/CAqB,EAAAA,EAAAA,YAAU,KAIRhB,EAAYiB,QAAU,EAAE,GAEvB,KA0CDC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAY,KACbH,EAAAA,EAAAA,MAACI,EAAAA,EAAS,CAACC,SAAS,KAAKC,GAAI,CAAEC,GAAI,GAAIN,SAAA,EACrCC,EAAAA,EAAAA,KAACM,EAAAA,EAAU,CAACC,MAAOC,EAAAA,EAAYC,gBAC/BT,EAAAA,EAAAA,KAACU,EAAAA,EAAS,CAAAX,SAAC,wBAEXD,EAAAA,EAAAA,MAACa,EAAAA,GAAa,CAACC,MAAO,CAAEC,UAAWlB,GAAII,SAAA,EACrCD,EAAAA,EAAAA,MAACgB,EAAAA,GAAW,CACVF,MAAO,CAAErC,OAAQoB,EAAGoB,WAAY,OAAQC,UAAW,QAASjB,SAAA,EAE5DC,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CACNC,MAAO,CACLC,QAAS,gEAGZvC,EAAYiB,SACXjB,EAAYiB,QAAQuB,KAAI,CAACC,EAAMC,KAG7B,MAAMC,EACU,SAAdF,EAAKG,KACD,CAAEL,QAASE,EAAKI,QAASC,UAAW,YACpC,CAAEP,QAASE,EAAKI,SACtB,OAAOzB,EAAAA,EAAAA,KAACiB,EAAAA,GAAO,CAACC,MAAOK,GAAUD,EAAM,GAAM,QAWnDtB,EAAAA,EAAAA,KAAC2B,EAAAA,GAAY,CACXC,OAnEKC,MAAOC,EAAWC,EAAaC,EAAWC,KAEvDvD,GAAU,GAGVE,EAAYiB,QAAU,IACjBjB,EAAYiB,QACf,CAAE2B,KAAM,OAAQC,QAASM,IAI3B,MAaMR,SAbiBhC,EAAO2C,KAAKC,YAAYC,OAAO,CACpDlB,MAAO,gBACPmB,SAAU,CACR,CACEb,KAAM,OACNC,QAASM,IAGbO,YAAa,GACbC,WAAY,KACZC,MAAO,KAGYC,QAAQ,GAAGtB,QAGhCvC,EAAYiB,QAAU,IAAIjB,EAAYiB,QAAS0B,GAC/C7C,GAAU,EAAM,EAwCRgE,YAAY,oBACZC,cAAc,EACd/B,MAAO,CAAEG,WAAY,aAGxBtC,IACCuB,EAAAA,EAAAA,KAAC4C,EAAAA,EAAG,CACFxC,GAAI,CACFyC,SAAU,QACVC,KAAM,MACNC,IAAK,MACLC,QAAS,OACTC,UAAW,yBACXlD,UAEFC,EAAAA,EAAAA,KAACkD,EAAAA,EAAO,SAMC,cAAd5E,GACCwB,EAAAA,EAAAA,MAAAqD,EAAAA,SAAA,CAAApD,SAAA,EACEC,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAAA,YAGF,KAIR,C","sources":["views/ChatGPT.js","util/cryptoUtil.js"],"sourcesContent":["import {\r\n  ChatContainer,\r\n  Message,\r\n  MessageInput,\r\n  MessageList,\r\n} from '@chatscope/chat-ui-kit-react';\r\nimport Container from '@mui/material/Container';\r\nimport OpenAI from 'openai';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport { Loading } from '../components/Loading';\r\nimport BlogHeader from '../components/header/BlogHeader';\r\nimport { TitleItem } from '../components/item/TitleItem';\r\nimport themeConfig from '../context/themeConfig';\r\nimport { useSideStyle } from '../hooks/useSideStyle';\r\nimport { DrawerHeader } from '../layout/MainLayout';\r\nimport { Box } from '@mui/material';\r\nimport { decrypt, encrypt } from '../util/cryptoUtil';\r\n\r\n/*\r\nnpm install gh-pages --save-dev\r\n\r\ngit remote add upstream https://github.com/deljjang/deljjang.github.io.git\r\n\r\ngit subtree push --prefix build/ upstream gh-pages\r\n\r\nhttps://deljjang.github.io\r\n\r\npackage.json 수정\r\n\"scripts\": {\r\n  (...)\r\n  \"predeploy\": \"npm run build\",\r\n  \"deploy\": \"gh-pages -d build\"\r\n}\r\n\r\n// crypto-js 암호화 복호화\r\nnpm install crypto-js\r\n\r\n무료호스팅\r\nhttps://velog.io/@couchcoding/%ED%8F%AC%ED%8A%B8%ED%8F%B4%EB%A6%AC%EC%98%A4%EC%9A%A9-%EB%AC%B4%EB%A3%8C-%EB%B0%B1%EC%97%94%EB%93%9C-%EC%84%9C%EB%B2%84-%EB%A7%8C%EB%93%A4%EA%B8%B0-Qoddi-Spring-%EB%B0%B0%ED%8F%AC-%EC%98%88%EC%A0%9C\r\n\r\nChatGPT.key= U2FsdGVkX18HKwDfEmmElFl64LhYEdvCs8fl9SbDWU8/iIK7zU0/EYSDDiAxuUvRqio/1dWGhNp6XYM4xmji0B0bYhn8ig8qyEB0iDUgDpo=\r\n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\r\n*/\r\n\r\n// Welcome to the OpenAI developer platform\r\n// https://platform.openai.com/docs/overview\r\n//\r\n// https://platform.openai.com/examples\r\n//\r\n// https://socket.dev/npm/package/@chatscope/chat-ui-kit-react\r\n// npm i @chatscope/chat-ui-kit-react\r\n// npm i @chatscope/chat-ui-kit-styles\r\n\r\nfunction ChatGPT() {\r\n  const { sideStyle, height } = useSideStyle();\r\n  const [isSend, setIsSend] = useState(false);\r\n  const sendMessage = useRef();\r\n\r\n  const data =\r\n    'U2FsdGVkX18HKwDfEmmElFl64LhYEdvCs8fl9SbDWU8/iIK7zU0/EYSDDiAxuUvRqio/1dWGhNp6XYM4xmji0B0bYhn8ig8qyEB0iDUgDpo=';\r\n  const key = decrypt(data);\r\n\r\n  const openai = new OpenAI({\r\n    apiKey: key,\r\n    dangerouslyAllowBrowser: true,\r\n  });\r\n\r\n  const h =\r\n    sideStyle === 'temporary' ? height - 134 - 56 + 'px' : height - 134 + 'px';\r\n  //   console.log('ChatGPT.height=', height);\r\n  //   console.log('ChatGPT.h=', h);\r\n\r\n  useEffect(() => {\r\n    // sendMessage.current = [\r\n    //   { role: 'system', content: '안녕하세요 Chat GPT입니다.' },\r\n    // ];\r\n    sendMessage.current = [];\r\n    // console.log('OPENAI_KEY=', process.env.REACT_APP_OPENAI_KEY);\r\n  }, []);\r\n\r\n/* 형식\r\n[\r\n{role: 'user', content: '한국의 대통령은 누구입니까?'}\r\n{role: 'assistant', content: '현재(2022년) 한국의 대통령은 문재인입니다.'}\r\n{role: 'user', content: '한국의 대통령은 누구입니까?'}\r\n]\r\n*/\r\n\r\n  const onSend = async (innerHtml, textContent, innerText, nodes) => {\r\n    // console.log(innerHtml, textContent, innerText, nodes);\r\n    setIsSend(true);\r\n    // console.log('onSend.textContent=', textContent);\r\n\r\n    sendMessage.current = [\r\n      ...sendMessage.current,\r\n      { role: 'user', content: textContent },\r\n    ];\r\n    // console.log('sendMessage=', sendMessage.current);\r\n\r\n    const response = await openai.chat.completions.create({\r\n      model: 'gpt-3.5-turbo',\r\n      messages: [\r\n        {\r\n          role: 'user',\r\n          content: textContent,\r\n        },\r\n      ],\r\n      temperature: 0.8,\r\n      max_tokens: 2048,\r\n      top_p: 1,\r\n    });\r\n\r\n    const msg = response.choices[0].message;\r\n    // console.log('msg=', msg);\r\n    // console.log('response=', response);\r\n    sendMessage.current = [...sendMessage.current, msg];\r\n    setIsSend(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <DrawerHeader />\r\n      <Container maxWidth=\"md\" sx={{ mt: 3 }}>\r\n        <BlogHeader title={themeConfig.templateName} />\r\n        <TitleItem>Chat GPT 3.5 turbo</TitleItem>\r\n        {/* <MainContainer> */}\r\n        <ChatContainer style={{ maxHeight: h }}>\r\n          <MessageList\r\n            style={{ height: h, background: '#555', overflowY: 'auto' }}\r\n          >\r\n            <Message\r\n              model={{\r\n                message: '안녕하세요 Chat GPT입니다.',\r\n              }}\r\n            />\r\n            {sendMessage.current &&\r\n              sendMessage.current.map((item, idx) => {\r\n                //   console.log('item=', item);\r\n                // {role: 'system', content: '안녕하세요 Chat GPT'}\r\n                const msg =\r\n                  item.role === 'user'\r\n                    ? { message: item.content, direction: 'outgoing' }\r\n                    : { message: item.content };\r\n                return <Message model={msg} key={idx + ''} />;\r\n              })}\r\n            {/* \r\n            <Message\r\n              model={{\r\n                message: 'Hello my friend2',\r\n                direction: 'outgoing',\r\n              }}\r\n            /> \r\n            */}\r\n          </MessageList>\r\n          <MessageInput\r\n            onSend={onSend}\r\n            placeholder=\"Type message here\"\r\n            attachButton={false}\r\n            style={{ background: '#555' }}\r\n          />\r\n        </ChatContainer>\r\n        {isSend && (\r\n          <Box\r\n            sx={{\r\n              position: 'fixed',\r\n              left: '50%',\r\n              top: '45%',\r\n              bgcolor: 'none',\r\n              transform: 'translate(-50%, -50%)',\r\n            }}\r\n          >\r\n            <Loading />\r\n          </Box>\r\n        )}\r\n        {/* </MainContainer> */}\r\n      </Container>\r\n      {/* <Footer /> */}\r\n      {sideStyle === 'temporary' ? (\r\n        <>\r\n          <br />\r\n          <br />\r\n        </>\r\n      ) : (\r\n        ''\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatGPT;\r\n","import CryptoJS from 'crypto-js';\r\nimport {salt} from '../data/menuData';\r\n\r\n/* 암호화 */\r\nexport const encrypt = (text) => {\r\n  // 값이 없을 경우 빈 문자열 반환\r\n  if (!text) return '';\r\n  return CryptoJS.AES.encrypt(text, salt).toString();\r\n};\r\n\r\n/* 복호화 */\r\nexport const decrypt = (text) => {\r\n  // 값이 없을 경우 빈 문자열 반환\r\n  if (!text) return '';\r\n\r\n  try {\r\n    const bytes = CryptoJS.AES.decrypt(text, salt); // 복호화 시도\r\n    return bytes.toString(CryptoJS.enc.Utf8);\r\n  } catch (error) {\r\n    console.error('Decryption error:', error); // 에러 로깅\r\n    return ''; // 에러 발생 시 빈 문자열 반환\r\n  }\r\n};\r\n"],"names":["sideStyle","height","useSideStyle","isSend","setIsSend","useState","sendMessage","useRef","key","text","CryptoJS","decrypt","salt","toString","Utf8","error","console","openai","OpenAI","apiKey","dangerouslyAllowBrowser","h","useEffect","current","_jsxs","children","_jsx","DrawerHeader","Container","maxWidth","sx","mt","BlogHeader","title","themeConfig","templateName","TitleItem","ChatContainer","style","maxHeight","MessageList","background","overflowY","Message","model","message","map","item","idx","msg","role","content","direction","MessageInput","onSend","async","innerHtml","textContent","innerText","nodes","chat","completions","create","messages","temperature","max_tokens","top_p","choices","placeholder","attachButton","Box","position","left","top","bgcolor","transform","Loading","_Fragment"],"sourceRoot":""}